#+TITLE: ~/dotfiles/emacs.org

* emacs.org
** What is this?
This is my emacs configuration in =org-mode=. It's loaded using =(org-babel-load-file "~/dotfiles/emacs.org")= from my =init.el=. It contains a lot of things inspired (stolen) from places around the on web such as:
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's config]]
- [[https://github.com/TheBB/dotemacs][TheBB's config]]
- [[https://github.com/jwiegley/dot-emacs][jwiegly's config]]
- [[https://github.com/syl20bnr/spacemacs][Spacemacs]]
- [[https://github.com/hlissner/doom-emacs][Doom Emacs]]
- [[https://github.com/MatthewZMD/.emacs.d#org0f80f62][M-EMACS]]
- [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org][yay-evil]]
- [[https://framagit.org/steckerhalter/steckemacs.el/-/tree/master][steckemacs]]

It is divided into two major parts:
1. *Emacs* - settings and packages that change how emacs works/looks/etc
2. *Languages* - setup for programming languages
** How to Add/Modify
To add a code block, type =<el= and press ~tab~, this adds an =emacs-lisp= code block.
To modify a code block, press ~C-c '~ to open an emacs-lisp buffer and hack away. Use ~SPC m e b~ to =eval-buffer= and implement the changes. Save or clear the changes with evil's =:w=, =:x=, or =:q=.
* Emacs
** Lexical binding
Lexical binding is supposed to make stuff faster
#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+END_SRC
** Personal Information
Who am I?
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kevin Pavao"
        user-mail-address "kpavao84@gmail.com")
#+END_SRC
** Package Setup
Set up =straight.el= instead of the built-in =package.el= to manage my packages.

Using straight because:
- it allows me to exactly reproduce my config on other machines, it creates a =default.el= file that acts as a lockfile for package versions
- it gets the latest package versions from git
- it's integated well with =use-package=
- I can edit package code if I want to, and straight will rebuild the package
- lots of other stuff, the README is quite good

Use the develop branch, this needs to be set before the bootstrap code below.
#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "develop")
#+END_SRC

Bootstrap code from the =straight.el= README
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

From the straight docs:
#+BEGIN_QUOTE
By setting the variable straight-cache-autoloads to a non-nil value, you can cause straight.el to cache the autoloads of all used packages in a single file on disk, and load them from there instead of from the individual package files if they are still up to date. This reduces the number of disk IO operations during startup from O(number of packages) to O(1), so it should improve performance. No other configuration should be necessary to make this work; however, you may wish to call straight-prune-build occasionally, since otherwise this cache file may grow quite large over time.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq straight-cache-autoloads t)
#+END_SRC

Automatically enable =:straight t=, which is basically the same as =:ensure t= but for straight
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
#+END_SRC

install  =use-package= and related packages
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (use-package diminish) ;; for :diminish
  (use-package bind-key) ;; for :bind
#+END_SRC

Install =ensure-system-package=
#+BEGIN_SRC emacs-lisp
  (use-package use-package-ensure-system-package)
#+END_SRC
*** COMMENT OLD package.el config
Keeping this for historical purposes

Setup the package repositories.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
               '("elpy" . "https://jorgenschaefer.github.io/packages/"))
  (package-initialize)
#+END_SRC

Automatically install and then setup =use-package= and =diminish=
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (unless (package-installed-p 'diminish)
    (package-install 'diminish))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish) ;; for :diminish
  (require 'bind-key) ;; for :bind
#+END_SRC

** Garbage Collection
Modify garbage collection. This is supposed to speed things up a bit.
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :hook (after-init . gcmh-mode))
#+END_SRC

Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range.
#+begin_src emacs-lisp
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
** Core
Things that modify or replace the core functionality of Emacs, or are needed by the rest of the config.

*** Saner Defaults
Settings for things that are defined in the C source code, so we use =emacs= as the package.
#+begin_src emacs-lisp
  (use-package emacs
    :straight nil
    :init
    ;; answer with y/n instead of typing out yes/no
    (defalias 'yes-or-no-p 'y-or-n-p)
    :custom
    ;; load new source files instead of stale elisp bytecode
    (load-prefer-newer t)
    ;; allow emacs to be any size, removes black bars
    (frame-resize-pixelwise t))
#+end_src

Refresh (revert in Emacs' terms) buffers when files change on disk. Makes sure to update any version control info that changes also.
#+begin_src emacs-lisp
  (use-package autorevert
    :straight nil
    :custom
    (global-revert-check-vc-info t)
    :config
    (global-auto-revert-mode +1))
#+end_src

Use utf-8 for everything.
#+begin_src emacs-lisp
  (use-package mule
    :straight nil
    :config
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-language-environment "UTF-8"))
#+end_src

Emacs likes to create lots of extra files for things, these settings prevent that. Also, create a newline at the end of the file on save.
#+begin_src emacs-lisp
  (use-package files
    :straight nil
    :custom
    (make-backup-files nil)    ;; stop creating backup~ files
    (auto-save-default nil)    ;; stop creating #autosave# files
    (create-lockfiles nil)     ;; stop creating .# files
    (require-final-newline t)) ;; auto add newline at the end of file
#+end_src

Use the system clipboard for killing/yanking (copying/pasting) and display column information in the modeline.
#+begin_src emacs-lisp
  (use-package simple
    :straight nil
    :custom
    ;; killing and yanking uses the system clipboard
    (save-interprogram-paste-before-kill t)
    :config
    ;; display column info in the modeline
    (column-number-mode +1))
#+end_src

When the lines in a file are so long that performance could suffer to an unacceptable degree, we say "so long" to the slow modes and options enabled  in that buffer, and invoke something much more basic in their place.
#+begin_src emacs-lisp
  (use-package so-long
    :straight nil
    :config
    (global-so-long-mode +1))
#+end_src

When you visit a file, point goes to the last place where it was when you previously visited the same file.
#+begin_src emacs-lisp
  (use-package saveplace
    :straight nil
    :config
    (save-place-mode +1))
#+end_src

Create =~/.emacs.d/etc/= and =~/.emacs.d/var/= to store files and data used by Emacs packages.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :init
    (setq no-littering-etc-directory
          (expand-file-name "etc/" user-emacs-directory))
    (setq no-littering-var-directory
          (expand-file-name "var/" user-emacs-directory)))
#+END_SRC

=show-paren-mode= highlights matching parentheses. The default delay is annoying so change it to =0=.
#+begin_src emacs-lisp
  (use-package paren
    :straight nil
    :custom
    (show-paren-delay 0)
    :config
    (show-paren-mode +1))
#+end_src

*** Keys
To set up custom keys, I use a combination of:
- =general= - provides a leader key and gives us an easy way to define custom keys in =use-package=
- =which-key= - shows a list of all available keybindings, it works nicely with =general=, as it will show all the keybindings available after pressing ~SPC~
- =hydra= - create a "mode" (similar to how i3 does resize mode) for repeated actions
**** general
#+BEGIN_QUOTE
=general.el= provides a more convenient method for binding keys in emacs ... Like =use-package= ...
#+END_QUOTE

This creates a =leader=, which allows you to set up custom keys after pressing a certain key
- Keys for all modes appear after pressing ~SPC~ in normal and visual mode, or ~M-SPC~ in everything else.
- Mode specific keys appear after pressing ~SPC m~ in normal and visual mode, or ~M-,~ in everything else.

It also adds a =:general= use-package keyword, so this needs to be setup before that is used anywhere.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :custom
    (general-override-states '(insert emacs hybrid normal visual motion operator replace))
    :config
    (general-override-mode)
    (general-evil-setup)
    (general-create-definer my-leader-def
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "M-SPC")

    (general-create-definer my-local-leader-def
      :states '(normal visual insert emacs)
      :prefix "SPC m"
      :non-normal-prefix "M-,")

    (my-leader-def
      "c" 'comment-dwim
      "RET" 'make-frame-command
      ;; bookmarks
      "r" '(:ignore t :wk "bookmarks")
      "rm" 'bookmark-set
      "rb" 'bookmark-jump
      "rl" 'bookmark-bmenu-list
      ;; quit / restart
      "q" '(:ignore t :wk "quit / restart")
      "qq" 'save-buffers-kill-terminal
      "qr" 'restart-emacs))
#+END_SRC
**** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0)
    :config
    (which-key-mode +1)
    (which-key-setup-minibuffer)
    (which-key-setup-side-window-bottom))
#+END_SRC
**** hydra
Add a zoom hydra from hydras github and a =straight= hydra from its github.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :defer t
    :general
    (my-leader-def
     "P" '(hydra-straight-helper/body :wk "pkgs"))
    :config
    (defhydra hydra-zoom (global-map "<f5>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out")
      ("r" (text-scale-set 0) "reset")
      ("0" (text-scale-set 0) :bind nil :exit t))
    (defhydra hydra-straight-helper (:hint nil :color green)

      "
  _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
  _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
  ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
  _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
  _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
      ("c" straight-check-all)
      ("C" straight-check-package)
      ("r" straight-rebuild-all)
      ("R" straight-rebuild-package)
      ("f" straight-fetch-all)
      ("F" straight-fetch-package)
      ("p" straight-pull-all)
      ("P" straight-pull-package)
      ("m" straight-merge-all)
      ("M" straight-merge-package)
      ("n" straight-normalize-all)
      ("N" straight-normalize-package)
      ("u" straight-push-all)
      ("U" straight-push-package)
      ("v" straight-freeze-versions)
      ("V" straight-thaw-versions)
      ("w" straight-watcher-start)
      ("W" straight-watcher-quit)
      ("g" straight-get-recipe)
      ("e" straight-prune-build)
      ("q" nil)))
#+END_SRC
**** COMMENT keyfreq
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-autosave-mode 1))
#+END_SRC
*** Vim Emulation
This allows you to use emacs keybindings while in evil's insert mode.
from https://stackoverflow.com/questions/25542097/emacs-evil-mode-how-to-change-insert-state-to-emacs-state-automatically
#+BEGIN_SRC emacs-lisp
  (defun my-emacs-in-normal-mode ()
    (setq evil-insert-state-map (make-sparse-keymap))
    (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state))
#+END_SRC

Evil mode is vim in emacs!
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :custom
    (evil-want-keybinding nil)  ;; evil-collection assumes this
    (evil-undo-system 'undo-fu)
    :config
    (evil-mode +1)
    (my-emacs-in-normal-mode))
#+END_SRC

Use evil bindings in various modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

surround.vim emulation.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+END_SRC

vim-commentary emulation
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode 1))
#+end_src

Jump around a file with a few keystrokes.
#+begin_src emacs-lisp
  (use-package evil-avy
    :after evil
    :general
    (my-leader-def
      "jgg" 'evil-avy-goto-word-0
      "jgj" 'avy-goto-word-0-below
      "jgk" 'avy-goto-word-0-above))

  (use-package evil-easymotion
    :after evil
    :general
    (my-leader-def
      "j" '(:ignore t :wk "easymotion")
      "jj" 'evilem-motion-next-line
      "jk" 'evilem-motion-previous-line
      "jw" 'evilem-motion-forward-word-begin
      "jb" 'evilem-motion-backward-word-begin
      "je" 'evilem-motion-forward-word-end
      "jW" 'evilem-motion-forward-WORD-begin
      "jE" 'evilem-motion-forward-WORD-end)
    :init
    (evilem-default-keybindings "S-SPC"))
#+end_src

Show tildes in the fringe on empty lines.
#+BEGIN_SRC emacs-lisp
  ;; (use-package vi-tilde-fringe
  ;;   :config
  ;;   (global-vi-tilde-fringe-mode 1))
#+END_SRC
*** Mouse
Better mouse scrolling - the default scrolling is too quick.
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 10
        scroll-step 1
        next-line-add-newlines nil
        scroll-conservatively 10000
        scroll-preserve-screen-position 1
        mouse-wheel-follow-mouse 't
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
*** Ivy / Counsel / Swiper
#+begin_quote
Ivy is a generic completion mechanism for Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand t
    :general
    ("<f6>" 'ivy-resume)
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-height 20)
    :config
    (ivy-mode 1))
#+END_SRC

#+BEGIN_QUOTE
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :demand t
    :general
    ("M-x" 'counsel-M-x)
    ("C-x C-f" 'counsel-find-file)
    ("<f1> f" 'counsel-describe-function)
    ("<f1> v" 'counsel-describe-variable)
    ("<f1> l" 'counsel-find-library)
    ("<f2> i" 'counsel-info-lookup-symbol)
    ("<f2> u" 'counsel-unicode-char)
    ("C-c g" 'counsel-git)
    ("C-c j" 'counsel-git-grep)
    ("C-c k" 'counsel-rg)
    ("C-x l" 'counsel-locate)
    ("C-S-r" 'counsel-expression-history)
    (my-leader-def
      "f" 'counsel-find-file
      "x" 'counsel-M-x)
    :config
    ;; use ripgrep for counsel-git-grep
    (setq counsel-git-cmd "rg --files")
    (setq counsel-rg-base-command
          "rg -i -M 120 --no-heading --line-number --color never %s ."))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel-etags
    :after counsel)
#+END_SRC

Make =ivy= look a bit nicer
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after (ivy counsel)
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+END_SRC

Sort results with =prescient=
#+begin_src emacs-lisp
  ;; (use-package prescient
  ;;   :after counsel)

  ;; (use-package ivy-prescient
  ;;   :after prescient
  ;;   :custom
  ;;   (ivy-prescient-sort-commands t)
  ;;   (ivy-prescient-retain-classic-highlighting t)
  ;;   (ivy-prescient-enable-filtering t)
  ;;   (ivy-prescient-enable-sorting t)
  ;;   :config
  ;;   (ivy-prescient-mode +1))
#+end_src

*** Search / Replace
Replace keybindings for emacs search and evil search with swiper.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after ivy
    :general
    ("C-s" 'swiper)
    (evil-normal-state-map "/" 'swiper))
#+END_SRC

Add find and replace info to the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :config
    (global-anzu-mode)
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp))
#+END_SRC
*** Undo
Using this for =evil= undo/redo.

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
#+END_SRC
*** Text Editing
**** multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :defer t
    :general
    (my-leader-def
      "v" 'mc/edit-lines))
#+END_SRC
**** iedit
#+BEGIN_QUOTE
Iedit - Edit multiple regions in the same way simultaneously
#+END_QUOTE
Using the default keybinding of ~C-;~.
- All occurrences of a symbol, string or a region in the buffer are highlighted corresponding to the thing under the point, current mark and prefix argument. Refer to the document of =iedit-mode= for details.
- Edit one of the occurrences The change is applied to other occurrences simultaneously.
- Finish - by pressing ~C-;~ again
#+BEGIN_SRC emacs-lisp
  (use-package iedit)
#+END_SRC
** Startup
Display the scratch buffer when starting up, use =org-mode= for the scratch buffer, and remove the default message.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :straight nil
    :custom
    (inhibit-startup-screen t)
    (initial-major-mode 'org-mode)
    (initial-scratch-message nil))
#+END_SRC

See how long startup takes with ~M-x esup~
#+begin_SRC emacs-lisp
  (use-package esup
    :commands (esup))
#+end_SRC
** Custom File
Use a separate custom file to remove the autogenerated code from =init.el=.
#+begin_src emacs-lisp
  (use-package cus-edit
    :straight nil
    :custom
    (custom-file (expand-file-name "custom.el" user-emacs-directory))
    :config
    (if (file-exists-p custom-file)
        (load-file custom-file)))
#+end_src
** Look and Feel
*** Change defaults
Use a non-blinking cursor for a more zen-like experience.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :straight nil
    :config
    (blink-cursor-mode -1)) ;; dont blink the cursor
#+END_SRC

*** Theme
Theme I'm currently using

Modus themes are WCAG AAA compliant, easy on the eyes, and super customizeable.

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :init
    (modus-themes-load-themes)
    :custom
    (modus-themes-bold-constructs t)
    (modus-themes-slanted-constructs t)
    (modus-themes-intense-paren-match t)
    (modus-themes-completions 'opinionated)
    ;; org specific settings
    (modus-themes-org-blocks 'grayscale)
    (modus-themes-headings '((t . rainbow)))
    (modus-themes-scale-headings t)
    :config
    (modus-themes-load-vivendi))
   #+END_SRC
*** COMMENT other themes
Some dark themes I Like
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    (doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    :config
    (load-theme 'doom-nord)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

  (use-package nord-theme
     :config
     (load-theme 'nord))

   (use-package kaolin-themes
     :init
     ;; (setq doom-themes-enable-bold t
     ;;       doom-themes-enable-italic t)
     (setq kaolin-themes-hl-line-colored t
           kaolin-themes-italic-comments t)
     :config
     ;; (load-theme 'doom-one t)
     ;; (doom-themes-treemacs-config)
     ;; (doom-themes-org-config)
     (load-theme 'kaolin-ocean t)
     (kaolin-treemacs-theme))

   (use-package poet-theme
      :config
      (load-theme 'poet-dark))

    ;; setup different fonts
    (add-hook 'text-mode-hook
              (lambda ()
                (variable-pitch-mode 1)))

    (set-face-attribute 'default nil :family "Iosevka" :height 130)
    (set-face-attribute 'fixed-pitch nil :family "Iosevka")
    (set-face-attribute 'variable-pitch nil :family "ETBookOT")

    (load-theme 'base16-tomorrow-night)
    (load-theme 'kaolin-dark)
    (load-theme 'doom-one)
    (load-theme 'doom-tomorrow-night)
    (load-theme 'doom-city-lights)
    (load-theme 'kaolin-ocean)
    (load-theme 'base16-spacemacs)
    (load-theme 'gruvbox-dark-hard)
    (load-theme 'sourcerer)
    (load-theme 'spacemacs-dark)
    (load-theme 'base16-tomorrow-dark)
    (load-theme 'base16-twilight-dark)
    (load-theme 'base16-default-dark)
    (load-theme 'solarized-dark)
    (setq solarized-distinct-fringe-background t)
    (load-theme 'base16-ocean-dark)
    (load-theme 'material)
    (load-theme 'spacegray)
    (load-theme 'dracula)
    (load-theme 'reykjavik)
    (set-cursor-color "gainsboro")
#+END_SRC

Some light themes I like
#+BEGIN_SRC emacs-lisp
  (load-theme 'spacemacs-light)
  (load-theme 'light-soap)
  (load-theme 'solarized-light)
#+END_SRC
*** Font
Font I'm currently using
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka-12"))
#+END_SRC
**** COMMENT other fonts
Other fonts I like
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Victor Mono-12"))
  (add-to-list 'default-frame-alist '(font . "Monoid HalfTight-10"))
  (add-to-list 'default-frame-alist '(font . "Monoid-10"))
  (add-to-list 'default-frame-alist '(font . "Hermit-12"))
  (add-to-list 'default-frame-alist '(font . "Lemon-12"))
  (add-to-list 'default-frame-alist '(font . "Uushi-11"))
  (add-to-list 'default-frame-alist '(font . "Cherry-13"))
  (add-to-list 'default-frame-alist '(font . "Scientifica-14" ))
  (add-to-list 'default-frame-alist '(font . "Curie-14" ))
  (add-to-list 'default-frame-alist '(font . "Fira Code-12" ))
  (add-to-list 'default-frame-alist '(font . "Hack-12" ))
  (add-to-list 'default-frame-alist '(font . "Input Mono Narrow-11" ))
  (add-to-list 'default-frame-alist '(font . "Hermit-10" ))
  (add-to-list 'default-frame-alist '(font . "Monaco-10" ))
  (add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono-11" ))
  (add-to-list 'default-frame-alist '(font . "GohuFont-14" ))
  (add-to-list 'default-frame-alist '(font . "envypn-11" ))
#+END_SRC
*** Modeline
**** doom modeline
You need to run =M-x all-the-icons-install-fonts= to get the fancy fonts in the modeline

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :defer t)
#+END_SRC

=column-number-mode= displays the cursors current line on the modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :demand t
    :preface
    (defun my-doom-modeline-setup ()
      (column-number-mode +1)
      (doom-modeline-mode +1))
    :init (my-doom-modeline-setup)
    :custom
    (doom-modeline-vcs-max-length 50)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+END_SRC
**** COMMENT telephone-line
Set up all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

this is modified from [[https://github.com/ogdenwebb/snug-emacs][ogdenwebb/snug-emacs]]
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :hook (after-init . telephone-line-mode)
    :config
    ;; (setq telephone-line-primary-left-separator 'telephone-line-flat
    ;;       telephone-line-secondary-left-separator 'telephone-line-flat
    ;;       telephone-line-primary-right-separator 'telephone-line-flat
    ;;       telephone-line-secondary-right-separator 'telephone-line-flat)

    (setq telephone-line-primary-left-separator 'telephone-line-abs-left
          telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left
          telephone-line-primary-right-separator 'telephone-line-abs-right
          telephone-line-secondary-right-separator 'telephone-line-abs-hollow-right)

    (defface my-accent-active
      '((t (:foreground "#ECEFF4" :background "#3B4252" :inherit mode-line)))
      "Accent face for mode-line."
      :group 'telephone-line)

    (defface my-blue-accent
      '((t (:foreground "#ECEFF4" :background "#5E81AC" :inherit mode-line)))
      "Accent face for mode-line."
      :group 'telephone-line)

    (defface my-line-evil-insert
      '((t (:background "#A3BE8C" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Insert state."
      :group 'telephone-line-evil)

    (defface my-line-evil-normal
      '((t (:background "#5E81AC" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Normal state."
      :group 'telephone-line-evil)

    (defface my-line-evil-visual
      '((t (:background "#D08770" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Visual{,-Block,-Line} state."
      :group 'telephone-line-evil)

    (defface my-line-evil-replace
      '((t (:background "black" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Replace state."
      :group 'telephone-line-evil)

    (defface my-line-evil-motion
      '((t (:background "dark blue" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Motion state."
      :group 'telephone-line-evil)

    (defface my-line-evil-operator
      '((t (:background "#B48EAD" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Operator state."
      :group 'telephone-line-evil)

    (defface my-line-evil-emacs
      '((t (:background "dark violet" :inherit telephone-line-evil)))
      "Face used in evil color-coded segments when in Emacs state."
      :group 'telephone-line-evil)

    (defun my-evil-face (active)
      "Return an appropriate face for the current mode, given whether the frame is ACTIVE."
      (cond ((not active) 'mode-line-inactive)
            (t (intern (concat "my-line-evil-" (symbol-name evil-state))))))

    (setq telephone-line-faces
          '((evil . my-evil-face)
            (accent my-accent-active . mode-line-inactive)
            (blue-accent my-blue-accent . mode-line-inactive)
            (nil mode-line . mode-line-inactive)))

    (setq modeline-ignored-modes '("Warnings"
                                   "Compilation"
                                   "EShell"
                                   "Debugger"
                                   "REPL"
                                   "IELM"
                                   "Messages"))

    (setq telephone-line-height 20)

    (telephone-line-defsegment my-evil-segment ()
      "Display evil state as text symbol."
      (let ((tag (cond
                  ((string= evil-state "normal")    "<N>")
                  ((string= evil-state "insert")    "<I>")
                  ((string= evil-state "replace")   "<R>")
                  ((string= evil-state "visual")    "<V>")
                  ((string= evil-state "operator")  "<O>")
                  ((string= evil-state "motion")    "<M>")
                  ((string= evil-state "emacs")     "<E>")
                  ((string= evil-state "multiedit") "<ME>")
                  (t "-"))))
        (format "%s" tag)))

    (telephone-line-defsegment* my-major-mode-segment-icon ()
      "Display the name of the major mode along with an icon representing the major mode."
      (let ((icon (all-the-icons-icon-for-mode major-mode :v-adjust 0.0 :height 0.8 :face font-lock-string-face)))
        (concat
         (when
             (and (not (eq major-mode (all-the-icons-icon-for-mode major-mode)))
                  (telephone-line-selected-window-active))
           (format "%s " icon))
         (propertize mode-name 'face =font-lock-string-face))))

    (telephone-line-defsegment* my-major-mode-segment ()
      "Display the name of the major mode."
      (propertize mode-name 'face `font-lock-string-face))

    (telephone-line-defsegment my-modified-status-segment ()
      "Display if the buffer has been saved or not."
      (when (and (buffer-modified-p) (not (member mode-name modeline-ignored-modes)) (not buffer-read-only))
        (format "%s "
                (propertize (all-the-icons-faicon "pencil")
                            'face `(:height 1.0 :foreground "#EBCB8B")
                            'display '(raise 0.0)))))

    (telephone-line-defsegment my-buffer-segment ()
      "Display the path to the current file.
  If in a project, concatenate the paths up to the project and highlight the project name.
  e.g. ~/p/projectname/file.scm"
      (cond ((and (fboundp 'projectile-project-name)
                  (fboundp 'projectile-project-p)
                  (projectile-project-p))
             (list ""
                   (propertize
                    (telephone-line--truncate-path ;; the path to the project
                     (abbreviate-file-name (file-name-directory (directory-file-name (projectile-project-root)))) 1)
                    'face `(:foreground "#81A1C1")
                    'help-echo (buffer-file-name))
                   (propertize
                    (funcall (telephone-line-projectile-segment) face)
                    'face `(:foreground "#A3BE8C" :weight bold))
                   (propertize
                    (concat "/" (file-relative-name (file-truename (buffer-file-name)) (projectile-project-root)))
                    'help-echo (buffer-file-name))))
            ((buffer-file-name)
             (propertize (file-truename (buffer-file-name))
                         'help-echo (buffer-file-name)))
            (t
             (propertize
              (format "%s" (telephone-line-raw mode-line-buffer-identification t))))))

    (telephone-line-defsegment my-selection-info-segment ()
      "Information about the size of the current selection, when applicable.
      Supports both Emacs and Evil cursor conventions."
      (when (or mark-active
                (and (bound-and-true-p evil-local-mode)
                     (eq 'visual evil-state)))
        (let* ((lines (count-lines (region-beginning) (region-end)))
               (chars (- (1+ (region-end)) (region-beginning)))
               (evil (and (bound-and-true-p evil-state) (eq 'visual evil-state)))
               (rect (or (bound-and-true-p rectangle-mark-mode)
                         (and evil (eq 'block evil-visual-selection))))
               (multi-line (or (> lines 1) (and evil (eq 'line evil-visual-selection)))))
          (cond (multi-line
                 (propertize
                  (format " %dc:%dL" (if evil chars (1- chars)) lines)
                  'face `(:foreground "#81A1C1")))
                (t
                 (propertize
                  (format " %dc" (if evil chars (1- chars)))
                  'face `(:foreground "#81A1C1")))))))

    (defadvice vc-mode-line (after strip-backend () activate)
      "Hide 'Git:' from the vc segment"
      (when (stringp vc-mode)
        (let ((my-vc (replace-regexp-in-string "^ Git." "" vc-mode)))
          (setq vc-mode my-vc))))

    (telephone-line-defsegment my-vc-segment ()
      (when (and vc-mode
                 (telephone-line-selected-window-active))
        ;; double format to prevent warnings in '*Messages*' buffer
        (format "%s %s"
                (propertize (format "%s" (all-the-icons-octicon "git-branch"))
                            'face `(:family ,(all-the-icons-octicon-family) :height 1.0 :foreground ,(face-foreground 'font-lock-variable-name-face))
                            'display '(raise 0.0))
                (propertize
                 (format "%s"
                         (telephone-line-raw vc-mode t))
                 'face `(:foreground ,(face-foreground 'font-lock-variable-name-face))))))

    (setq telephone-line-lhs
          '((evil   . (my-evil-segment))
            (accent . (my-major-mode-segment-icon
                       telephone-line-erc-modified-channels-segment
                       telephone-line-process-segment))
            (nil    . (my-modified-status-segment
                       telephone-line-filesize-segment
                       my-buffer-segment
                       my-selection-info-segment))))
    (setq telephone-line-rhs
          '((nil         . (telephone-line-misc-info-segment))
            (accent      . (my-vc-segment
                            telephone-line-flycheck-segment
                            telephone-line-airline-position-segment))
            (blue-accent . (telephone-line-atom-encoding-segment)))))
#+END_SRC
**** COMMENT My custom modeline
From various places, like:
- https://occasionallycogent.com/custom_emacs_modeline/index.html
- https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline
#+BEGIN_SRC emacs-lisp
  (setq-default
   mode-line-format
   (list
    '(:eval (propertize evil-mode-line-tag
                        'face 'font-lock-preprocessor-face))
    " "

    mode-line-misc-info ; for eyebrowse

    ;; the buffer name; the file name as a tool tip
    '(:eval (propertize "%b " 'face 'font-lock-keyword-face
                        'help-echo (buffer-file-name)))

    ;; the current major mode for the buffer.
    "["

    '(:eval (propertize "%m" 'face 'font-lock-string-face
                        'help-echo buffer-file-coding-system))
    ;;" -"
    ;;minor-mode-alist ;; the minor modes for the current buffer
    "] "

    "[" ;; insert vs overwrite mode, input-method in a tooltip
    '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                        'face 'font-lock-preprocessor-face
                        'help-echo (concat "Buffer is in "
                                           (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod"
                                       'face 'font-lock-warning-face
                                       'help-echo "Buffer has been modified"))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO"
                                       'face 'font-lock-type-face
                                       'help-echo "Buffer is read-only"))))
    "] "

    ;; line and column
    "(" ;; '%02' to set to 2 chars at least; prevents flickering
    (propertize "%02l" 'face 'font-lock-type-face) ","
    (propertize "%02c" 'face 'font-lock-type-face)
    ") "

    ;; '(:eval (list (nyan-create)))

    ;; relative position, size of file
    "["
    (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
    ;;"/"
    ;;(propertize "%I" 'face 'font-lock-constant-face) ;; size
    "] "

    ;;" %-" ;; fill with '-'
    ))
#+END_SRC

****** TODO make the color of the bar change when switching between evil modes
#+BEGIN_SRC emacs-lisp
  ;; change mode-line color by evil state
  ;;(lexical-let ((default-color (cons (face-background 'mode-line)
  ;;                                  (face-foreground 'mode-line))))
  ;;    (add-hook 'post-command-hook
  ;;    (lambda ()
  ;;      (let ((color (cond ((minibufferp) default-color)
  ;;                      ((evil-insert-state-p) '("#eee" . "#ffffff"))
  ;;                      ((evil-emacs-state-p)  '("#444488" . "#ffffff"))
  ;;                      ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
  ;;                      (t default-color))))
  ;;      (set-face-background 'mode-line (car color))
  ;;      (set-face-foreground 'mode-line (cdr color))))))
#+END_SRC
*** COMMENT solaire
Make certain buffers lighter/darker, e.g. treemacs. This only works in doom and kaolin themes.
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    ;; Ensure solaire-mode is running in all solaire-mode buffers
    :hook (change-major-mode . turn-on-solaire-mode)
    ;; ...if you use auto-revert-mode, this prevents solaire-mode from turning
    ;; itself off every time Emacs reverts the file
    :hook (after-revert . turn-on-solaire-mode)
    ;; To enable solaire-mode unconditionally for certain modes:
    :hook (ediff-prepare-buffer . solaire-mode)
    ;; Highlight the minibuffer when it is activated:
    :hook (minibuffer-setup . solaire-mode-in-minibuffer)
    :config
    (setq solaire-mode-auto-swap-bg nil)
    (solaire-global-mode +1))
#+END_SRC
*** rainbow delimiters
Add rainbow delimiters in all programming language modes
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** COMMENT  highlight indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook ((prog-mode web-mode) . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-delay 0))
#+END_SRC
** Custom Functions
*** what-minor-mode
list minor modes
- =my-active-minor-modes= is from: https://stackoverflow.com/questions/1511737/how-do-you-list-the-active-minor-modes-in-emacs
- =my/active-minor-modes= is =doom/what-minor-mode= from https://github.com/hlissner/doom-emacs
  + it uses =my-active-minor-modes= for the list of minor modes to display
#+BEGIN_SRC emacs-lisp
  (defun my-active-minor-modes ()
    "Get a list of active minor-mode symbols."
    (delq nil
          (mapcar
           (lambda (x)
             (let ((car-x (car x)))
               (when (and (symbolp car-x) (symbol-value car-x))
                 x)))
           minor-mode-alist)))

  (defun my/what-minor-mode (mode)
    "Get information on an active minor mode. Use `describe-minor-mode' for a
  selection of all minor-modes, active or not."
    (interactive
     (list (completing-read "Minor mode: "
                            (my-active-minor-modes))))
    (describe-minor-mode-from-symbol
     (cl-typecase mode
       (string (intern mode))
       (symbol mode)
       (t (error "Expected a symbol/string, got a %s" (type-of mode))))))
#+END_SRC

Add a key for it:
#+begin_src emacs-lisp
  (my-leader-def
    "l" 'my/what-minor-mode)
#+end_src
** Window and Buffer Management
*** Keys
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    "b" '(:ignore t :wk "buffers")
    "bb" 'switch-to-buffer
    "bk" 'kill-buffer
    "wo" 'split-window-horizontally
    "wu" 'split-window-vertically
    "wd" 'delete-window)
#+END_SRC
*** eyebrowse
Eyebrowse provides a way to manage workspaces like tiling window managers.
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :general
    (my-leader-def
      "w." 'eyebrowse-switch-to-window-config
      "w," 'eyebrowse-rename-window-config
      "w1" 'eyebrowse-switch-to-window-config-1
      "w2" 'eyebrowse-switch-to-window-config-2
      "w3" 'eyebrowse-switch-to-window-config-3
      "w4" 'eyebrowse-switch-to-window-config-4
      "w4" 'eyebrowse-switch-to-window-config-4
      "w5" 'eyebrowse-switch-to-window-config-5
      "w6" 'eyebrowse-switch-to-window-config-6
      "w7" 'eyebrowse-switch-to-window-config-7
      "w8" 'eyebrowse-switch-to-window-config-8
      "w9" 'eyebrowse-switch-to-window-config-9
      "w0" 'eyebrowse-switch-to-window-config-0)
    :config
    (eyebrowse-mode t))
#+END_SRC
*** windmove
Windmove provides a way to move around emacs windows.

Default keybindings are: ~S-arrowkey~ (e.g. ~S-Left~) to move around
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :straight nil
    :general
    (my-leader-def
      "w" '(:ignore t :wk "windows")
      "wh" 'windmove-left
      "wj" 'windmove-down
      "wk" 'windmove-up
      "wl" 'windmove-right)
    :config
    (windmove-default-keybindings))
#+END_SRC
** Project and File Management
*** dired
Some tips for using dired:
- Toggle =dired-details-mode= with ~(~
- Toggle writeable mode with ~C-x C-q~
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :defer t
    :hook (dired-mode . dired-hide-details-mode)
    :general
    (my-leader-def
      "d" 'dired))

  ;; Colourful columns.
  (use-package diredfl
    :after dired
    :config
    (diredfl-global-mode +1))
#+END_SRC

Press ~C-(~ to get git info
#+BEGIN_SRC emacs-lisp
  (use-package dired-git-info
      :bind (:map dired-mode-map
                  ("C-(" . dired-git-info-mode)))
#+END_SRC
*** projectile
Projectile allows some nice things for projects, such as searching for files, managing buffers, etc.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1))

  (use-package counsel-projectile
    :after (counsel projectile)
    :general
    (my-leader-def
      "p" '(:ignore t :wk "projects")
      "pf" 'counsel-projectile-find-file
      "pd" 'counsel-projectile-find-dir
      "pb" 'counsel-projectile-switch-to-buffer
      "pp" 'counsel-projectile-switch-project
      "pg" 'counsel-projectile-rg) ;;ripgrep
    :config
    (counsel-projectile-mode +1))
#+END_SRC
*** treemacs
A file tree.
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :general ([f8] 'treemacs))

  (use-package treemacs-evil
    :after (evil treemacs))

  (use-package treemacs-projectile
    :after (projectile treemacs))

  (use-package treemacs-magit
    :after (treemacs))
#+END_SRC
** Org Mode
Setup =org-mode=. Most of these are functions that will get called in either the =:hook= or =:config= part of the =use-package= setup for =org=.

*** Look and Feel
Settings to make org mode look a bit nicer.

A lot of this stuff is from:
- http://blog.lujun9972.win/emacs-document/blog/2018/10/22/ricing-up-org-mode/index.html
- https://zzamboni.org/post/beautifying-org-mode-in-emacs/
- http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html

The prettify hook:
- =turn-on-visual-line-mode= for visual word wrap
- =variable-pitch-mode= to use a non =monospaced= font
- =org-bullets= provides good looking bullets for headers
#+BEGIN_SRC emacs-lisp
  (defun my-org-prettify-hook ()
    (turn-on-visual-line-mode)
    (variable-pitch-mode +1)
    (org-bullets-mode +1))

  (use-package org-bullets)
#+END_SRC

Various settings to make things look nicer:
- =org-startup-indented= starts up =org-indent-mode=
- =org-src-fontify-natively= turns on syntax highlighting for =#+SRC= blocks
- =org-hide-emphasis-markers= hides the things that make text *bold*, /italics/, =monospaced=, etc.
- =org-fontify-whole-heading-line=  is useful when setting background colors for =org-level-*= faces
- =org-fontify-done-headline= make DONE headlines look nicer
- =org-fontify-quote-and-verse-blocks= makes quotes and verses italic
- =line-spacing= to give the text a bit more breathing room
- the =font-lock= part is a regex that uses a unicode bullet for lists (lines that start with "- " or "+ ")
  - this is only for the first level of lists, other levels arent replaced
#+BEGIN_SRC emacs-lisp
  (defun my-org-prettify-settings ()
    (setq org-startup-indented t
          org-src-fontify-natively t
          org-hide-emphasis-markers t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          line-spacing 0.2)
    ;; (font-lock-add-keywords 'org-mode
    ;;                         '(("^\\([-+]\\) "
    ;;                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; (my-org-faces)
    )
#+END_SRC

**** COMMENT Variable Pitch Fonts
Keeping this here in case I go back. This is now in =:custom-faces= in the =use-package org= setup
#+BEGIN_SRC emacs-lisp
  (defun my-org-faces ()
    (custom-theme-set-faces
     'user
     '(variable-pitch ((t (:family "EtBembo" :height 160 :weight normal :slant normal))))
     '(fixed-pitch ((t (:family "Iosevka" :height 0.8))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-document-title ((t (:foreground "#B48EAD" :weight bold :height 1.4))))
     '(org-level-1 ((t (:inherit outline-1 :height 1.3 :weight bold :foreground "#8fbcbb"))))
     '(org-level-2 ((t (:inherit outline-1 :height 1.2 :weight bold :foreground "#88c0d0"))))
     '(org-level-3 ((t (:inherit outline-1 :height 1.1 :weight bold :foreground "#81a1c1"))))
     '(org-level-4 ((t (:inherit outline-1 :height 1.0 :weight bold :foreground "#5e81ac"))))
     '(org-level-5 ((t (:inherit outline-1 :height 1.0 :weight bold))))
     '(org-block-begin-line ((t (:inherit 'fixed-pitch :background nil))))
     '(org-block-end-line ((t (:inherit 'org-block-begin-line)))))
    (mapc
     (lambda (face)
       (set-face-attribute face nil :inherit 'fixed-pitch))
     (list 'org-code
           'org-link
           'org-block
           'org-table
           'org-verbatim
           'org-meta-line
           'org-document-info-keyword)))
#+END_SRC

**** htmlize
Provides syntax highlighting for =#+SRC= blocks in html exports.

Needed by =pelican= and =nikola=
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer t)
#+END_SRC
*** Setup for TODOs
- =org-use-fast-todo-selection=
  - Change the status of the todo state by pressing ~C-c C-c t <KEY>~
  - the =<KEY>= is the the letter in the parens after the state (e.g. =TODO(t)=)
- =org-todo-keywords=
  - add things to the TODO states besides =TODO= and =DONE=
  - mostly taken from from http://doc.norang.ca/org-mode.html
- =org-log-done=
  - insert time/date when moved to DONE

#+BEGIN_SRC emacs-lisp
  (defun my-org-todo-setup ()
    (setq org-use-fast-todo-selection t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "CURRENT(c)" "|" "DONE(d)")
            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(a@/!)")))
    ;; (setq org-todo-keyword-faces
    ;;       (quote (("TODO" :foreground "#BF616A" :weight bold)
    ;;               ("NEXT" :foreground "#5E81AC" :weight bold)
    ;;               ("CURRENT" :foreground "#88C0D0" :weight bold)
    ;;               ("DONE" :foreground "#A3BE8C" :weight bold)
    ;;               ("WAITING" :foreground "#D08770" :weight bold)
    ;;               ("HOLD" :foreground "#848EAD" :weight bold)
    ;;               ("CANCELLED" :foreground "#8FBCBB" :weight bold))))
    (setq org-log-done 'time))
#+END_SRC

*** Structure Templates
Add structure templates, e.g. type =<el= ~TAB~ for =#+BEGIN_SRC emacs-lisp #+END_SRC=
Existing templates for reference:
- https://orgmode.org/manual/Easy-templates.html

As of Emacs 27.1, =org-tempo= is required to use these.
#+BEGIN_SRC emacs-lisp
  (defun my-org-structure-templates ()
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh")))
#+END_SRC

*** Capture Templates
#+begin_src emacs-lisp
  (use-package org-capture
    :straight nil
    :general
    (my-leader-def
      "C" 'org-capture)
    :config
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/agenda/todo.org" "Tasks")
             "* TODO %?\n %i\n %a")
            ("s" "Standup" entry (file+olp+datetree "~/org/agenda/todo.org" "Standup")
             "* Planned\n- %?\n %i\n %a")
            ("g" "Grow Log" entry (file+olp+datetree "~/grow/grow.org" "Log")
             "* Day Xn\n** Log\n** Notes\n %?\n %i\n")))

    (defun org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
      (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
             (fname (org-hugo-slug title)))
        (mapconcat #'identity
                   `(
                     ,(concat "* TODO " title)
                     ":PROPERTIES:"
                     ,(concat ":EXPORT_FILE_NAME: " fname)
                     ":END:"
                     "%?\n")          ;Place the cursor here finally
                   "\n")))

    (add-to-list 'org-capture-templates
                 '("b"
                   "Blog Post"
                   entry
                   ;; It is assumed that below file is present in `org-directory'
                   ;; and that it has a "Blog Ideas" heading. It can even be a
                   ;; symlink pointing to the actual location of all-posts.org!
                   (file+olp "blog-posts.org" "Ideas")
                   (function org-hugo-new-subtree-post-capture-template))))
#+end_src
*** Use Package
Put it all together with =use-package=.

The =org-src-mode-map= bit in the =:general= block maps ~:x~ to confirm and ~:q~ to abort when editing =SRC= blocks.

I dont need documentation for elisp in this config, so =my-disable-flycheck-for-elisp= disables flycheck for it.

=:custom-face= is mainly the setup for variable pitch mode:
- Set fonts for both variable and fixed pitch modes
- =org-indent= is to make =org-indent-mode= look right, otherwise the spacing is off
- The =org-level-*= stuff makes headings bigger.
- Several things should be in =fixed-pitch=, such as tables so  they are indented correctly
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight nil
    :general
    (org-src-mode-map
     [remap evil-save-and-close]          'org-edit-src-exit
     [remap evil-save-modified-and-close] 'org-edit-src-exit
     [remap evil-quit]                    'org-edit-src-abort)
    (my-leader-def
      "a" 'org-agenda)
    (my-local-leader-def 'org-mode-map
      "b" 'org-babel-tangle
      "t" 'org-todo)
    :gfhook
    #'my-org-prettify-hook
    ('org-src-mode-hook #'my-disable-flycheck-for-elisp)
    :preface
    (defun my-disable-flycheck-for-elisp ()
      (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    :custom-face
    (variable-pitch ((t (:family "EtBembo" :height 160 :weight normal :slant normal))))
    (fixed-pitch ((t (:family "Iosevka" :height 0.8))))
    ;; this is all handled in modus-vivendi!
    ;; (org-indent ((t (:inherit (org-hide fixed-pitch)))))
    ;; (org-document-title ((t (:foreground "#B48EAD" :weight bold :height 1.4))))
    ;; (org-level-1 ((t (:inherit outline-1 :height 1.3 :weight bold ;; :foreground "#8fbcbb"
    ;;                            ))))
    ;; (org-level-2 ((t (:inherit outline-1 :height 1.2 :weight bold ;; :foreground "#88c0d0"
    ;;                            ))))
    ;; (org-level-3 ((t (:inherit outline-1 :height 1.1 :weight bold ;; :foreground "#81a1c1"
    ;;                            ))))
    ;; (org-level-4 ((t (:inherit outline-1 :height 1.0 :weight bold ;; :foreground "#5e81ac"
    ;;                            ))))
    ;; (org-level-5 ((t (:inherit outline-1 :height 1.0 :weight bold))))
    ;; (org-block-begin-line ((t (:inherit 'fixed-pitch :background nil))))
    ;; (org-block-end-line ((t (:inherit 'org-block-begin-line))))
    ;; (org-code ((t (:inherit 'fixed-pitch))))
    ;; (org-link ((t (:inherit 'fixed-pitch))))
    ;; (org-block ((t (:inherit 'fixed-pitch))))
    ;; (org-table ((t (:inherit 'fixed-pitch))))
    ;; (org-verbatim ((t (:inherit 'fixed-pitch))))
    ;; (org-meta-line ((t (:inherit 'fixed-pitch))))
    ;; (org-document-info-keyword ((t (:inherit 'fixed-pitch))))
    :custom
    (org-agenda-files (list "~/org/agenda/"))
    :config
    (my-org-prettify-settings)
    (my-org-todo-setup)
    (my-org-structure-templates))
#+END_SRC
*** Org Babel
=org-babel-do-load-languages= enables languages for in-buffer evaluation
#+BEGIN_SRC emacs-lisp
  (use-package org-babel
    :no-require
    :straight nil
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t))))
#+END_SRC
*** Writing
Some things to make writing nicer.

Olivetti centers the text and sets a minimum width. It makes reading things, especially on widescreens, a bit nicer.
#+begin_src emacs-lisp
  (use-package olivetti
    :defer t
    :custom
    (olivetti-body-width 90))
#+end_src

Writegood highlights text based on a set of weasel-words, passive-voice and duplicate words.
#+begin_src emacs-lisp
  (use-package writegood-mode
    :defer t)
#+end_src

Enable the minor modes I use for writing
#+begin_src emacs-lisp
  (defun my/writing-modes ()
    (interactive)
    (flyspell-mode +1)
    (olivetti-mode +1)
    (writegood-mode +1))
#+end_src

*** ox-hugo
org mode for hugo blogs. Having an issue with loading this on OSX so only install it on Linux for now.
#+begin_src emacs-lisp
  ;; this seems to be required for ox-hugo to work
  (use-package ox :straight nil)

  (when (eq system-type 'gnu/linux)
    (use-package ox-hugo
      :after ox))
#+end_src
** Code
Things that are used when coding.
*** Line Numbers
Add line numbers to programming mode buffers. I think they look wierd in my org config due to the different sized fonts.
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :straight nil
    :ghook
    ('prog-mode-hook #'display-line-numbers-mode))
#+END_SRC
*** flycheck
Enable error checking everywhere.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode +1))
#+END_SRC
*** company
Company provides code completion.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode +1))
#+END_SRC
*** language server protocol
Setup for Microsoft's (GASP!) Language Server Protocol. Any language that uses this calls =lsp= in the language mode's =:hook= / =:ghook=

#+BEGIN_QUOTE
The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  ;; (setq lsp-keymap-prefix "C-l")

  (use-package lsp-mode
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp
    :custom
    (lsp-completion-provider :capf)
    (lsp-keymap-prefix "C-l"))

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package dap-mode)
#+END_SRC

Some handy links
- https://emacs-lsp.github.io/lsp-mode/page/performance/
*** electric pair
Use the built in =electric-pair-mode= to autocomplete brackets.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :straight nil
    :hook
    (prog-mode . electric-pair-mode)
    (org-mode . electric-pair-mode))
#+END_SRC
*** COMMENT dumb-jump
Get some nice go-to-definition functionality
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :defer t
    :general
    ("M-g o" 'dumb-jump-go-other-window)
    ("M-g j" 'dumb-jump-go)
    ("M-g i" 'dumb-jump-go-prompt)
    ("M-g x" 'dumb-jump-go-prefer-external)
    ("M-g z" 'dumb-jump-go-prefer-external-other-window)
    ("<f9>"  'dumb-jump-hydra/body)
    ;; (my-leader-def
    ;;   "jg" '(:ignore t :wk "go")
    ;;   "jgg" 'dumb-jump-go
    ;;   "jgc" 'dumb-jump-go-current-window
    ;;   "jgo" 'dumb-jump-go-other-window
    ;;   "jgp" 'dumb-jump-go-prefer-external
    ;;   "jgP" 'dumb-jump-go-prefer-external-other-window
    ;;   "jgp" 'dumb-jump-go-prompt
    ;;   "jb" 'dumb-jump-back
    ;;   "jq" 'dumb-jump-quick-look)
    :custom
    (dumb-jump-selector 'ivy)
    (dumb-jump-force-searcher 'rg)
    :config
    (defhydra dumb-jump-hydra (:color blue :columns 3)
      "Dumb Jump"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back")))
#+END_SRC
*** yasnippet
Use snippets in specific modes
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
   :custom
   (yas-snippet-dirs
    '("~/.emacs.d/snippets"))
   :config
   (yas-global-mode +1))
#+END_SRC

Install the official snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :after yasnippet)
#+END_SRC
*** editorconfig
Use editorconfig for projects that have them

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :delight
    :config
    (editorconfig-mode +1))
#+END_SRC
** Version Control
*** magit
use git in emacs!

=magit-yank-branch-name= is from https://emacs.stackexchange.com/questions/30487/add-copy-to-kill-ring-current-branch-name-with-magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :general
    ("C-x g" 'magit-status)
    (my-leader-def
      "g" '(:ignore t :wk "git")
      "gs" 'magit-status
      "gc" 'magit-checkout
      "gC" 'magit-commit
      "gb" 'magit-blame
      "gS" 'magit-stage-file
      "gU" 'magit-unstage-file
      "gg" 'hydra-my-git-menu/body
      "gy" 'my/magit-yank-branch-name)
    :custom
    (magit-completing-read-function 'ivy-completing-read)
    :config
    (defun my/magit-yank-branch-name ()
      "Show the current branch in the echo-area and add it to the `kill-ring'."
      (interactive)
      (let ((branch (magit-get-current-branch)))
        (if branch
            (progn (kill-new branch)
                   (message "%s" branch))
          (user-error "There is not current branch")))))
#+END_SRC

*** Forge
This adds integration with github
#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src
*** COMMENT magithub
Press ~H~ in the magit status window to get the popup for magithub.
#+BEGIN_SRC emacs-lisp
  ;; (use-package magithub
  ;;   :after (magit)
  ;;   :config
  ;;   (magithub-feature-autoinject t)
  ;;   (setq magithub-clone-default-directory "~/repos"))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :defer t)
#+END_SRC
*** git-messenger
Show commit info
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :defer t)
#+END_SRC
*** git-gutter-fringe
Show whether something has been added, modified, or deleted on the side of the screen.
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :config
    (global-git-gutter-mode +1)
    (setq-default fringes-outside-margins t))
#+end_src
*** COMMENT git-gutter-fringe old
This doesn't look great with modus-themes, so commenting it out for now.
Taken from the doom-emacs config.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :config
    (global-git-gutter-mode +1)
    (setq-default fringes-outside-margins t)
    (define-fringe-bitmap 'git-gutter-fr:added
      [240 240 240 240 240 240 240 240 240 240 240 240 240 240]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [240 240 240 240 240 240 240 240 240 240 240 240 240 240]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 128 192 224 240 248]
      nil nil 'center)
    (fringe-helper-define 'git-gutter-fr:added '(center repeated)
      "XXX.....")
    (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
      "XXX.....")
    (fringe-helper-define 'git-gutter-fr:deleted 'bottom
      "X......."
      "XX......"
      "XXX....."
      "XXXX...."))
#+END_SRC
*** git-link
Get the URLs for links/commits/repo homepages. This is useful for PRs and tickets when you need to link to a certain line of code.

#+begin_src emacs-lisp
  (use-package git-link
    :general
    (my-leader-def
      "gl" '(:ignore t :wk "git link")
      "gll" 'git-link
      "glc" 'git-link-commit
      "glh" 'git-link-homepage))
#+end_src
*** browse-at-remote
This is almost the opposite of =git-link=, it will open selected line(s) on the remote (e.g. github).
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :general
    (my-leader-def
      "glg" 'browse-at-remote))
#+end_src
*** My Git Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-my-git-menu (global-map "<f7>"
                                          :color blue)
    "
  ^Navigate^        ^Action^               ^Info^
  ^^^^^^^^^^^^---------------------------------------------------
  _j_: next hunk    _s_: stage hunk        _d_: diff
  _k_: prev hunk    _S_: stage file        _c_: show commit
  ^ ^               _U_: unstage file      _g_: magit status
  ^ ^               ^ ^                    _t_: git timemachine
  ^ ^               ^ ^                    ^ ^
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("s" git-gutter:stage-hunk)
    ("S" magit-stage-file)
    ("U" magit-unstage-file)
    ("c" git-messenger:popup-show)
    ("g" magit-status :exit t)
    ("d" magit-diff-buffer-file)
    ("t" git-timemachine :exit t)
    ("q" quit-window "quit-window")
    ("<ESC>" git-gutter:update-all-windows "quit" :exit t))
#+END_SRC

Git timemachine
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-my-git-timemachine-menu (:color blue)
    ("s" git-timemachine "start")
    ("j" git-timemachine-show-next-revision "next revision")
    ("k" git-timemachine-show-previous-revision "prev revision")
    ("c" git-timemachine-show-current-revision "curr revision")
    ("<ESC>" git-timemachine-show-current-revision "quit" :exit t))
#+END_SRC
** System Specific
*** OSX
Paths need to be explicitly defined for some reason in OSX.
=exec-path-from-shell= fixes it.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (eq system-type 'darwin)
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

Enable ligatures for fonts that have them
Only seems to work on railwaycat/homebrew-emacsmacport
#+BEGIN_SRC emacs-lisp
  ;; (when (eq system-type 'darwin)
  ;;   (mac-auto-operator-composition-mode))
#+END_SRC

Use python 3 by default
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq python-shell-interpreter "/usr/local/bin/python3"))
#+END_SRC

OSX displays a big yellow warning sign for a visual bell and I think its annoying. This flashes the modeline instead.
Taken from here https://www.emacswiki.org/emacs/AlarmBell
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq visible-bell nil
          ring-bell-function 'flash-mode-line)
    (defun flash-mode-line ()
      (invert-face 'mode-line)
      (run-with-timer 0.1 nil #'invert-face 'mode-line)))
#+end_src

Point to the git executable, this is supposed to speed up =magit=
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq magit-git-executable "/usr/bin/git"))
#+end_src
*** Linux
**** StumpWM
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'x)
    (use-package stumpwm-mode
      :defer t))
#+END_SRC

Connect to a sly repl that can control stumpwm
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'x)
    (defun my/stumpwm-connect ()
      (interactive)
      (sly-connect "localhost" "4004")))
#+END_SRC

** Local file
The local file contains machine specific stuff, eg for my home and my work configs.
#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "~/dotfiles/emacs-local.org")
#+END_SRC

** Chat
Configuration for the built in =erc= client.

This uses IRC credentials in the =~/.authinfo= file:
#+begin_src
machine irc.freenode.net login <nickname> password <password> port 6697
#+end_src
#+begin_src emacs-lisp
  (use-package erc
    :defer t
    :straight nil
    :preface
    (defun erc-start-or-switch ()
      "Start ERC or switch to ERC buffer if it has started already."
      (interactive)
      (if (get-buffer "irc.freenode.net:6697")
          (erc-track-switch-buffer 1)
        (erc-tls :server "irc.freenode.net" :port 6697 :nick my-irc-nick :full-name user-full-name)))
    :init
    (defcustom my-irc-nick "kpav"
      "Nickname used to log into IRC"
      :type 'string)
    :custom
    (erc-autojoin-channels-alist '(("freenode.net" "#emacs" "#archlinux" "#python" "#clojure" "#hy" "#stumpwm")))
    (erc-track-exclude-types '("NICK" "PART" "MODE" "324" "329" "332" "333" "353" "477"))
    (erc-server-coding-system '(utf-8 . utf-8))
    (erc-interpret-mirc-color t)
    (erc-kill-buffer-on-part t)
    (erc-kill-queries-on-quit t)
    (erc-kill-server-buffer-on-quit t))
#+end_src
** COMMENT Mail
I need to re-set this up on OSX .
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :straight nil
    :config
    (setq mu4e-maildir "~/mail")
    (setq mu4e-sent-folder "/[Gmail].Sent Mail")
    (setq mu4e-drafts-folder "/[Gmail].Drafts")
    (setq mu4e-trash-folder "/[Gmail].Trash"))
#+END_SRC

** Other
*** restart
Yo dawg, use =restart-emacs= to restart emacs within emacs.
Using this because I'm constantly making changes to this file and sometimes I need to restart things for changes to take affect.
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :defer t)
#+END_SRC
*** COMMENT multi-term
run multiple terminals at once (as opposed to =M-x term=, which can only run one terminal at a time)
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :general
    (my-leader-def
      "tt" 'multi-term
      "tn" 'multi-term-next
      "tp" 'multi-term-prev)
    :defer t)
#+END_SRC
*** vterm
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

#+begin_src emacs-lisp
  (use-package multi-vterm
    :general
    (my-leader-def
      "t" '(:ignore t :wk "term")
      "tt" 'multi-vterm
      "tn" 'multi-vterm-next
      "tp" 'multi-vterm-prev)
    :config
    (add-hook 'vterm-mode-hook
              (lambda ()
                ;; (setq-local evil-insert-state-cursor 'box)
                (evil-insert-state)))
    (define-key vterm-mode-map [return]                      #'vterm-send-return)

    (setq vterm-keymap-exceptions nil)
    (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
    (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
    (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
    (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
    (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
    (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
    (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
    (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
    (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
#+end_src
*** restclient
Test RESTful APIs in emacs!
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :defer  t)

  (use-package company-restclient
    :defer t)

  (use-package ob-restclient
    :defer t)
#+END_SRC
*** COMMENT revealjs
make reveal.js presentations in org mode
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :config
    (setq org-reveal-root "file:///Users/kevinpavao/reveal.js-3.8.0"))
#+END_SRC
* Languages
Configuration for programming languages
** C
Example taken from [[https://www.emacswiki.org/emacs/IndentingC][EmacsWIki: Indenting C]]
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
        c-basic-offset 4)
#+END_SRC
** COMMENT C#
I don't really use C# anymore, but I should re-set this up at some point.
#+BEGIN_SRC emacs-lisp
  ;; (use-package csharp-mode
  ;;   :init
  ;;   (add-to-list 'company-backends 'company-omnisharp))

  ;; from omnisharp-emacs README
  ;; (eval-after-load
  ;;   'company
  ;;   '(add-to-list 'company-backends #'company-omnisharp))

  ;; (defun my-csharp-mode-setup ()
  ;;   (omnisharp-mode)
  ;;   (company-mode)
  ;;   (flycheck-mode)

  ;;   (setq indent-tabs-mode nil)
  ;;   (setq c-syntactic-indentation t)
  ;;   (c-set-style "ellemtel")
  ;;   (setq c-basic-offset 4)
  ;;   (setq truncate-lines t)
  ;;   (setq tab-width 4)
  ;;   (setq evil-shift-width 4)

    ;csharp-mode README.md recommends this too
    ;(electric-pair-mode 1)       ;; Emacs 24
    ;(electric-pair-local-mode 1) ;; Emacs 25

  ;;   (local-set-key (kbd "C-c r r") 'omnisharp-run-code-action-refactoring)
  ;;   (local-set-key (kbd "C-c C-c") 'recompile))

  ;; (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)
#+END_SRC
Omnisharp should load after a csharp file is loaded
#+BEGIN_SRC emacs-lisp
  ;; (use-package omnisharp
  ;;   :init
  ;;   (setq omnisharp-server-executable-path "~/omnisharp-server/OmniSharp/bin/Debug/OmniSharp.exe")
  ;;   :config
  ;;  (add-hook 'csharp-mode-hook 'omnisharp-mode))
#+END_SRC
omnisharp evil-mode keys...
taken from: https://github.com/OmniSharp/omnisharp-emacs/blob/master/example-config-for-evil-mode.el
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'insert omnisharp-mode-map (kbd "M-.") 'omnisharp-auto-complete)
  (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-go-to-definition)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g u") 'omnisharp-find-usages)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g I") 'omnisharp-find-implementations) ; g i is taken
  (evil-define-key 'normal omnisharp-mode-map (kbd "g o") 'omnisharp-go-to-definition)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g r") 'omnisharp-run-code-action-refactoring)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g f") 'omnisharp-fix-code-issue-at-point)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g F") 'omnisharp-fix-usings)
  (evil-define-key 'normal omnisharp-mode-map (kbd "g R") 'omnisharp-rename)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", i") 'omnisharp-current-type-information)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", I") 'omnisharp-current-type-documentation)
  (evil-define-key 'insert omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n t") 'omnisharp-navigate-to-current-file-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n s") 'omnisharp-navigate-to-solution-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n f") 'omnisharp-navigate-to-solution-file-then-file-member)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n F") 'omnisharp-navigate-to-solution-file)
  (evil-define-key 'normal omnisharp-mode-map (kbd ", n r") 'omnisharp-navigate-to-region)
  (evil-define-key 'normal omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
  (evil-define-key 'insert omnisharp-mode-map (kbd "<f12>") 'omnisharp-show-last-auto-complete-result)
  (evil-define-key 'normal omnisharp-mode-map (kbd ",.") 'omnisharp-show-overloads-at-point)
  (evil-define-key 'normal omnisharp-mode-map (kbd ",rl") 'recompile)

  (evil-define-key 'normal omnisharp-mode-map (kbd ",rt")
    (lambda() (interactive) (omnisharp-unit-test "single")))

  (evil-define-key 'normal omnisharp-mode-map
    (kbd ",rf")
    (lambda() (interactive) (omnisharp-unit-test "fixture")))

  (evil-define-key 'normal omnisharp-mode-map
    (kbd ",ra")
    (lambda() (interactive) (omnisharp-unit-test "all")))

  ;; Speed up auto-complete on mono drastically. This comes with the
  ;; downside that documentation is impossible to fetch.
  (setq omnisharp-auto-complete-want-documentation nil)
#+END_SRC

** Docker
Docker is not necessarily a programming langage, but....

=Dockerfile= is
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t)
#+end_src

Use =docker= commands in emacs
#+begin_src emacs-lisp
  (use-package docker
    :defer t)
#+end_src
** Haskell
For xmonad and beyond
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'"
    :hook (haskell-mode . turn-on-haskell-indent))
#+END_SRC
** Javascript
*** Vanilla
Setup for JavaScript using =js2-mode= and =LSP=.

LSP mode is using =typescript-language-server=.
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.js$"
    :hook (js2-mode . lsp)
    :interpreter "node"
    :ensure-system-package ((typescript-language-server . "npm i -g typescript-language-server")
                            (eslint_d . "npm i -g eslint_d"))
    :custom
    ;; set the indent level to 2
    (js2-basic-offset 2)
    (js-chain-indent t)
    (js-indent-level 2)
    ;; use eslint_d instead of eslint for faster linting
    (flycheck-javascript-eslint-executable "eslint_d"))
#+END_SRC
**** COMMENT JS without LSP
- autocomplete with =tern=
- using =tide= for:
  + info in the minibuffer about the highlighted item
  + jump to defifinition / implementation
  + linting
- prettify the file on save using =prettier-js= along with =prettier=
- add =eslint= to =flycheck= for linting

Largely stolen from https://github.com/CSRaghunandan/.emacs.d/blob/master/setup-files/setup-js.el
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode (("\\.js$" . js2-mode))
    :hook (js2-mode . my-js-hook)
    ;; :ensure-system-package ((prettier . "npm i -g prettier")
    ;;                         (eslint . "npm i -g eslint")
    ;;                         (eslint_d . "npm i -g eslint_d"))

    :preface
    (defun my-tide-setup-hook ()
      "Configure tide"
      (tide-setup)
      ;; highlight identifiers
      (tide-hl-identifier-mode +1)
      (eldoc-mode t)
      (flycheck-mode t)
      ;; configure javascript-tide checker to run after your default javascript checker
      (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
      ;; (prettier-js-mode)
      )

    ;; TODO make this work with eslint
    ;; (defun my-lsp-js-setup-hook ()
    ;;   "Fix company completions for the LSP and then enable it"
    ;;   (defun my-company-transformer (candidates)
    ;;     (let ((completion-ignore-case t))
    ;;       (all-completions (company-grab-symbol) candidates)))
    ;;   (make-local-variable 'company-transformers)
    ;;   (push 'my-company-transformer company-transformers)
    ;;   (lsp-javascript-typescript-enable))

    (defun my-js-hook ()
      "Set up JavaScript"
      ;; set evil indent, ">>", to 2
      (setq evil-shift-width js-indent-level)
      (my-tide-setup-hook)
      ;; (my-lsp-js-setup-hook)
      (tern-mode t)
      (smartparens-mode t))
    :init
    ;; set the indent level to 2
    (setq js2-basic-offset 2)
    (setq js-chain-indent t)
    (setq js-indent-level 2)

    ;; use eslint_d instead of eslint for faster linting
    (setq flycheck-javascript-eslint-executable "eslint_d")

    ;; highlight most ECMA built-ins
    (setq js2-highlight-level 3)

    ;; turn off all warnings in js2-mode
    (setq js2-mode-show-parse-errors t)
    (setq js2-mode-show-strict-warnings nil)
    (setq js2-strict-missing-semi-warning nil))
#+END_SRC

=tern= and =tern-company= are for auto completion
#+BEGIN_SRC emacs-lisp
  (use-package tern
    ;; :ensure-system-package ((tern . "npm i -g tern"))
    :init
    (setq tern-command '("/home/kevin/.node_modules/bin/tern")))

  (use-package company-tern
    :config
    (add-to-list 'company-backends 'company-tern))
#+END_SRC

Set up =tide-mode=
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :after (js2-mode company flycheck))
#+END_SRC

Set up =prettier-js-mode=
#+BEGIN_SRC emacs-lisp
  ;; (use-package prettier-js
  ;;   :hook ((js2-mode . prettier-js-mode)
  ;;          (rjsx-mode . prettier-js-mode)))
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'")
#+END_SRC
*** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts$"
    :hook (typescript-mode . lsp))
#+end_src
#+BEGIN_SRC emacs-lisp
  ;; (use-package tide
  ;;   :config
  ;;   ;; aligns annotation to the right hand side
  ;;   (setq company-tooltip-align-annotations t)
  ;;   ;; formats the buffer before saving
  ;;   (add-hook 'before-save-hook 'tide-format-before-save)
  ;;   (add-hook 'typescript-mode-hook
  ;;             (lambda ()
  ;;               (interactive)
  ;;               (tide-setup)
  ;;               (flycheck-mode +1)
  ;;               (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  ;;               (eldoc-mode +1)
  ;;               (tide-hl-identifier-mode +1)))
  ;;   (add-hook 'tide-mode-hook
  ;;             (lambda ()
  ;;               (define-key tide-mode-map (kbd "<f12>") 'tide-jump-to-definition))))
#+END_SRC
*** React
=rjsx-mode= is for editing =.jsx= files

Dont need too much here because it uses =js2-mode= where most of the config is done
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :mode "\\.jsx\\'")
#+END_SRC
*** REPL
Setup up a javascript repl using =skewer=
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
    :defer t
    :ghook ('js2-mode-hook)
    :general
    (my-local-leader-def 'js2-mode-map
      "eb" 'skewer-eval-defun
      "el" 'skewer-eval-last-expression))
#+END_SRC

To use, =M-x run-skewer= and then =M-x skewer-repl=
** COMMENT Latex
#+BEGIN_SRC emacs-lisp
  (use-package auctex)
  (use-package company-auctex)
#+END_SRC
** Lisp
*** Keys
All lisp languages have a set of shared keys:
| Key       | Command        |
|-----------+----------------|
| SPC m e b | eval buffer    |
| SPC m e l | eval last sexp |
| SPC m e d | eval defun     |
| SPC m e r | eval region    |

Some languages have some more, but those are the base keys for all lisps.

Replace =+prefix=  with =+eval= in =which-key= for =SPC m e=
#+begin_src emacs-lisp
  (which-key-add-major-mode-key-based-replacements 'clojure-mode "SPC m e" "eval")
  (which-key-add-major-mode-key-based-replacements 'emacs-lisp-mode "SPC m e" "eval")
  (which-key-add-major-mode-key-based-replacements 'hy-mode "SPC m e" "eval")
  (which-key-add-major-mode-key-based-replacements 'lisp-interaction-mode "SPC m e" "eval")
  (which-key-add-major-mode-key-based-replacements 'scheme-mode "SPC m e" "eval")
#+end_src
*** Shared
Shared setup for all lisp modes.

A list of all lisp modes that I use. This is used with =:ghook= to enable =lispy= in all of these modes.
#+BEGIN_SRC emacs-lisp
  (defconst my-lisp-mode-hooks
    '(lisp-mode-hook
      sly-mrepl-mode-hook
      emacs-lisp-mode-hook
      scheme-mode-hook
      geiser-repl-mode-hook
      hy-mode-hook
      inferior-hy-mode-hook
      clojure-mode-hook
      cider-repl-mode-hook))
#+END_SRC

Now setup packages that will be used for all the lisp modes above.
- =lispy= inserts matching parentheses, among other things.
- turn off =smartparens= because it is not needed with =lispy= (it also adds pairs for single quotes, which is annoying in lisp)
- =lispyville= makes =evil-mode= play nice with =lispy=

#+BEGIN_SRC emacs-lisp
  (defun my-lisp-setup ()
    (electric-pair-mode -1))

  (use-package paredit
    :defer t
    :ghook my-lisp-mode-hooks
    :gfhook #'my-lisp-setup)

  ;; (defun my-lisp-setup ()
  ;;   (turn-off-smartparens-mode)
  ;;   (lispyville-mode 1))

  ;; (use-package lispyville)

  ;; (use-package lispy
  ;;   :defer t
  ;;   :ghook my-lisp-mode-hooks
  ;;   :gfhook #'my-lisp-setup
  ;;   :general
  ;;   ("\"" 'lispy-quotes)
  ;;   ("(" 'lispy-parens)
  ;;   (")" 'lispy-right-nostring)
  ;;   ("}" 'lispy-brackets)
  ;;   ("{" 'lispy-braces)
  ;;   ("[" 'lispy-forward)
  ;;   ("]" 'lispy-backward)
  ;;   (";" 'lispy-comment))
#+END_SRC
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (my-local-leader-def
    :keymaps 'emacs-lisp-mode-map
    "eb" 'eval-buffer
    "el" 'eval-last-sexp
    "ed" 'eval-defun
    "er" 'eval-region)
#+END_SRC

#+begin_src emacs-lisp
  (my-local-leader-def
    :keymaps 'lisp-interaction-mode-map
    "eb" 'eval-buffer
    "el" 'eval-last-sexp
    "ed" 'eval-defun
    "er" 'eval-region)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src
*** Clojure
=lsp= is using [[https://github.com/snoe/clojure-lsp][snoe/clojure-lsp]]
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :hook ((clojure-mode . lsp)
           (clojurec-mode . lsp)
           (clojurescript-mode . lsp))
    :config
    (dolist (m '(clojure-mode
                 clojurec-mode
                 clojurescript-mode
                 clojurex-mode))
      (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
    (setq lsp-enable-indentation nil))
#+END_SRC

CIDER is the Clojure(Script) Interactive Development Environment that Rocks!

=cider-repl-set-ns= sets the repl's namespace (ns) to the current file so you can eval and then use functions without adding the ns
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :after clojure-mode
    :hook (cider-repl-mode . rainbow-delimiters-mode)
    :general
    (my-local-leader-def 'clojure-mode-map
      "r" 'cider
      "n" 'cider-repl-set-ns
      "er" 'cider-eval-region
      "eb" 'cider-eval-buffer
      "el" 'cider-eval-last-sexp))
#+END_SRC
*** Common Lisp
**** Sly
#+begin_src emacs-lisp
  (use-package sly
    :defer t
    :hook (sly-mrepl-mode . rainbow-delimiters-mode)
    :general
    (my-local-leader-def
      :keymaps 'lisp-mode-map
      "eb" 'sly-eval-buffer
      "el" 'sly-eval-last-expression
      "ed" 'sly-eval-defun
      "er" 'sly-eval-region)
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl"))

  (use-package sly-quicklisp
    :after sly)

  (use-package sly-asdf
    :after sly)
#+end_src
**** COMMENT Slime
Using this to mess with stumpwm right now.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :defer t
    :general
    (my-local-leader-def
      :keymaps 'lisp-mode-map
      "eb" 'slime-eval-buffer
      "el" 'slime-eval-last-expression
      "ed" 'slime-eval-defun
      "er" 'slime-eval-region)
    :custom
    (inferior-lisp-program "/usr/bin/sbcl")
    (slime-contribs '(slime-fancy)))

  (use-package slime-company
    :config
    (slime-setup '(slime-company)))
#+END_SRC
*** Hy
Let's get hy. A lisp for Python.
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode
    :mode "\\.hy\\'"
    :general
    (my-local-leader-def 'hy-mode-map
      "er" 'hy-shell-eval-region
      "eb" 'hy-shell-eval-buffer
      "el" 'hy-shell-eval-last-sexp
      "ed" 'hy-shell-eval-current-form))
#+END_SRC
*** Scheme
=geiser= provides a nice repl for *scheme* and other things
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :defer t
    :general
    (my-local-leader-def
      :keymaps 'scheme-mode-map
      "r" 'run-geiser
      "er" 'geiser-eval-region
      "eR" 'geiser-eval-region-and-go
      "eb" 'geiser-eval-buffer
      "eB" 'geiser-eval-buffer-and-go
      "ed" 'geiser-eval-definition
      "eD" 'geiser-eval-definition-and-go
      "el" 'geiser-eval-eval-sexp)
    :custom
    (geiser-active-implementations '(guile mit racket)))
#+END_SRC
** PHP
I use PHP for my job, so I need to use the =WellspringCodingStandard=.
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :mode "\\.php\\'"
    :gfhook #'my-php-setup
    :general
    (general-define-key
     :keymaps 'php-mode-map
     "C-c a" 'my/align-php-dbl-arrow)
    (my-local-leader-def 'php-mode-map
      "a" 'my/align-php-dbl-arrow
      "j" 'lsp-find-definition)
    :custom
    ;; align -> on successive lines
    (php-lineup-cascaded-calls t)
    (flycheck-phpcs-standard "WellspringCodingStandard"))
#+END_SRC

Setup the default coding style and LSP for php. Need to set =lsp-enable-file-watchers= to nil because the project has a large amount of files and it causes performance issues.
#+begin_src emacs-lisp
  (defun my-php-setup ()
    (php-enable-default-coding-style)
    (setq lsp-enable-file-watchers nil)
    (lsp))
#+end_src

Align the ==>= in arrays
#+begin_src emacs-lisp
  (defun my/align-php-dbl-arrow ()
    "Align the => in arrays."
    (interactive)
    (align-regexp
     (region-beginning) (region-end)
     "\\(\\s-*\\) => " 1 0 nil))
#+end_src

Use =PHP_CodeSniffer= to format files
#+BEGIN_SRC emacs-lisp
  (use-package phpcbf
    :after (php-mode)
    ;;:hook ((php-mode . phpcbf-enable-on-save))
    :custom
    (phpcbf-executable "/usr/local/bin/phpcbf")
    (phpcbf-standard "WellspringCodingStandard"))
#+END_SRC

=psysh= is a php repl
#+BEGIN_SRC emacs-lisp
  (use-package psysh
    :defer t)
#+END_SRC
*** COMMENT OLD company-php setup
keeping this here in case I want to stop using lsp

Documentation in the minibuffer and with =company=. This is needed by =company-php=.
#+BEGIN_SRC emacs-lisp
  ;; (use-package php-eldoc
  ;;   :after (php-mode))
#+END_SRC

Setup code completion and documentation.
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-php
  ;;   :after (php-eldoc)
  ;;   :hook (php-mode . my-company-php-hook)
  ;;   :preface
  ;;   (defun my-company-php-hook ()
  ;;     (ac-php-core-eldoc-setup)
  ;;     (make-local-variable 'company-backends)
  ;;     (add-to-list 'company-backends 'company-ac-php-backend)))
#+END_SRC

** Python
For =flycheck= to work, install =flake8=.

LSP uses the [[https://github.com/palantir/python-language-server][palantir python language server]] (pyls).
#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode "\\.py\\'"
    :ghook
    ('python-mode-hook #'lsp)
    :general
    (my-local-leader-def 'python-mode-map
      "er" 'python-shell-send-region
      "eb" 'python-shell-send-buffer
      "ef" 'python-shell-send-file
      "es" 'python-shell-send-string))
#+END_SRC

Use =pipenv= to handle virtual environments
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :hook ((python-mode . pipenv-mode)
           (hy-mode . pipenv-mode))
    :init
    (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+END_SRC
**** Elpy - OLD
trying out LSP instead of elpy, keeping this in case I want to go back.

[[https://github.com/jorgenschaefer/elpy][elpy]] is an "Emacs Lisp Python Environment"
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :config
  ;;   (elpy-enable))
#+END_SRC
** Web Mode
Set up web mode for html and css files
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :defer t
    :preface
    (defun my-web-mode-hook ()
      ;; set the html indent to 2
      (setq web-mode-markup-indent-offset 2)
      (setq evil-shift-width 2)
      ;; highlight matching elements in html
      (setq web-mode-enable-current-element-highlight 1))
    :hook (web-mode . my-web-mode-hook)
    :init
    ;; (setq web-mode-ac-sources-alist
    ;;       '(("css" . (ac-source-css-property))
    ;;         ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (add-hook 'web-mode-before-auto-complete-hooks
              '(lambda ()
                 (let ((web-mode-cur-language
                        (web-mode-language-at-pos))))))
    (add-to-list `auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list `auto-mode-alist '("\\.css\\'" . web-mode)))
#+END_SRC
** YAML
For editing =.yml= files
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src
* TODO Things to do
An on-going list of things I want to change
- [X] Add more keybindings for =evil-easymotion=
- [ ] Look into why =org-superstar= doesnt work on mac
- [ ] Figure out why =lispy= doesn't bind its keys correctly, e.g. =(= to =lispy-parens=
- [ ] Look into the build in =js-mode= in place of =js2-mode= and =rjsx=, it can now work with =jsx= files
- [ ] Look into =web-mode= for =tsx= files
- [-] make org prettier [1/2]
  - [ ] fix =company= results in =variable-pitch-mode=
  - [X] bullets?
    - only did the first level of bullets though
- [ ] setup and use org capture
  - this looks cool too https://addons.mozilla.org/en-US/firefox/addon/org-capture/
- [ ] Configure C#
  - use the C# lsp??
- [ ] setup =forge= to replace =magithub=
- [ ] window management hydra?
- [-] telephone-line [3/6]
  - [X] my-buffer-segment [3/3]
    - [X] display truncated path up to project name, full path up to file name
    - [X] color project name
    - [X] different colors for path / file name?
  - [X] fix colors
  - [X] git
  - [ ] eyebrowse
  - [ ] anzu
  - [ ] flycheck
- [ ] make jumping better
  - [ ] use 'ac' package jumps along with smart and dumb jump?
  - [ ] make keybindings consistent
  - [ ] lsp!

** Cool looking packages to check out
- =evil-snipe= - more motions in evil
- =purpose= - https://github.com/bmag/emacs-purpose
  - window/buffer management
- =eglot= - https://github.com/joaotavora/eglot
  - lightweight LSP
- =targets= - https://github.com/noctuid/targets.el
  - operate on text objects
- =git-gitter=
- =diff-hl= - like =git-gutter=
- =shackle= - https://github.com/wasamasa/shackle
  - control popup windows
- =smart-mode-line=
- =minions=
  - minor modes in the modeline?
- =moody=
  - powerline-esque modeline
- =github-notifier= - https://github.com/xuchunyang/github-notifier.el
  - github notification count in the modeline
- =evil-escape=
- =evil-indent=
- =emacs-libvterm= - https://github.com/akermu/emacs-libvterm
- =prescient= - sorts candiates in ivy, company, etc
- =ivy-posframe= - load ivy in a popup frame type thing
- =company-box= show cool icons in company results
- =org-present= org mode presentations
- =selectrum= replacement for ivy
- =ctrlf= replacement for swiper
